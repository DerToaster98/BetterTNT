plugins {
    id 'net.minecraftforge.gradle' version "${forgegradle_version}"
    id 'org.spongepowered.mixin' version "${mixingradle_version}"
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'org.parchmentmc.librarian.forgegradle' version "${parchmentmc_version}"
}

version = "${mc_version}-${mod_version}"
group = mod_group

base {
    archivesName = modid
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

jarJar.enable()

tasks.named('jarJar').configure {
	archiveClassifier = 'fat'
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mappings_channel, version: mappings_version

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=${modid}.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			
            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        client {
            taskName 'runClient BetterTNT 1.20.1'

            property 'forge.enabledGameTestNamespaces', modid
        }

        server {
            taskName 'runServer BetterTNT 1.20.1'

            property 'forge.enabledGameTestNamespaces', modid
        }
        gameTestServer {
            taskName 'runTestServer BetterTNT 1.20.1'

            property 'forge.enabledGameTestNamespaces', modid
        }

        data {
            workingDirectory project.file('run-data')

            taskName 'runData MHLib 1.20.1'

            args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "CurseMaven Maven"
        url = "https://www.cursemaven.com"
    }

    maven {
        name = "AzureDoom Maven"
        url = "https://libs.azuredoom.com:4443/mods"
    }
	
	maven {
        name = "CubicInterpolation Maven"
        url = "https://cubicinterpolation.net/maven/"
    }
}

dependencies {
    // Base
    minecraft("net.minecraftforge:forge:${mc_version}-${forge_version}")
    annotationProcessor("org.spongepowered:mixin:${mixin_version}:processor")

    // Dependencies (Embedded)
    implementation fg.deobf("commoble.databuddy:${databuddy_branch}:${databuddy_version}")

    jarJar(group: 'commoble.databuddy', name: "${databuddy_branch}", version: "[${databuddy_version},)")

    // Dependencies (Optional)
    implementation fg.deobf("mod.azure.azurelib:azurelib-forge-${azurelib_version}")
}

mixin {
    add sourceSets.main, "${modid}.refmap.json"
    config "${modid}.mixins.json"

    debug.verbose = true
    debug.export = true
    debug = true
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            mc_version: mc_version, mc_version_range: mc_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version: loader_version, mod_loader: mod_loader,
            modid: modid, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_credits: mod_credits, mod_description: mod_description, mod_issueTrackerURL: mod_issueTrackerURL,
            azurelib_version_range: azurelib_version_range,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_credits,
                'Specification-Version'   : mod_version,
                'Implementation-Title'    : mod_name,
                'Implementation-Version'  : mod_version,
                'Implementation-Vendor'   : mod_credits,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs'		  	  : "${modid}.mixins.json"
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}